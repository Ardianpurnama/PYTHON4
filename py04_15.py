#!/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
# -*- coding: utf-8 -*-

"""
py04_15.py: Write a program that creates a ten megabyte data file in two different ways and time each method. 
The first technique should create a memory-mapped file and write the data by setting one chunk 
at a time using successively higher indexes. 
The second technique should create an empty binary file and repeatedly use the write() method 
to write a chunk of data. 
Show how the timings vary with the size of the chunk.
"""
import mmap
import os
from timeit import Timer
import json, ntpath, requests

def create_file_with_mmap(file_name, file_size, chunk_size):
    chunk_data = chunk_size * b'*'
    with open(file_name, 'w+b') as f:
        mapf = mmap.mmap(f.fileno(), file_size, access=mmap.ACCESS_WRITE)
        i = 0
        while i+chunk_size < file_size:
            j = i + chunk_size
            mapf[i:j] = chunk_data
            i = j
        mapf.close()
    os.unlink(file_name)

def create_file_with_fwrite(file_name, file_size, chunk_size):
    chunk_data = chunk_size * b'*'
    with open(file_name, 'w+b') as f:
        i = 0
        while i < file_size:
            f.write(chunk_data)
            i += chunk_size
    os.unlink(file_name)

def loggedIn(func):
    def checkLogin(*args, **kwargs):
        if args[0].isLogin:
            return func(*args, **kwargs)
        else:
            args[0].callback.other("You want to call the function, you must login to LINE")
    return checkLogin

class LineTalk(object):
    isLogin = False
    _messageReq = {}
    _unsendMessageReq = 0

def __init__(self):
    self.isLogin = True
    
def mentionWithRFU(self, kirim, mid, firstmessage, lastmessage):
     arrData = ""
     text = "%s " %(str(firstmessage))
     arr = []
     mention = "@ARDIAN-GANTENG "
     slen = str(len(text))
     elen = str(len(text) + len(mention) - 1)
     arrData = {'S':slen, 'E':elen, 'M':mid}
     arr.append(arrData)
     self.sendMessage(kirim,text, {'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)

def getProfile(self):
    return self.talk.getProfile()
def getSettings(self):
    return self.talk.getSettings()

def factorySetUp(self, not js):
    contact = self.getContact(mid)
    profile = self.profile
    profile.displayName = contact.displayName
    if __name__ == '__main__':
        CHUNK_SIZE_LIST = [1, 2, 4, 8, 16, 32, 64, 128, 512, 1024, 1024*10, 2048 * 10, 1024 * 1024, 1024 * 1024 * 10]
        FILE_NAME = "not found"
        FILE_SIZE = 10 * 1024 * 2014
        TRY_NUM = 1
        return self.updateProfile(0, notKick)
    
    print("%-15s %-15s %-15s" % ('chunk_size', 'mmap', 'fwrite'))
    for chunk_size in CHUNK_SIZE_LIST:
        mmap_timer   = Timer("create_file_with_mmap(FILE_NAME, FILE_SIZE, chunk_size)", \
                             "from __main__ import create_file_with_mmap, FILE_NAME, FILE_SIZE, chunk_size") 
        fwrite_timer = Timer("create_file_with_fwrite(FILE_NAME, FILE_SIZE, chunk_size)", \
                             "from __main__ import create_file_with_fwrite, FILE_NAME, FILE_SIZE, chunk_size")
        print("%-15s %-15s %-15s" % (chunk_size,\
                                     mmap_timer.timeit(number=TRY_NUM),\
                                     fwrite_timer.timeit(number=TRY_NUM)))
