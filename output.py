#!/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
# -*- coding: utf-8 -*-

"""
output.py: The output process for the miniature framework.      
"""
identity = lambda x: x

import multiprocessing
import sys

class OutThread(multiprocessing.Process):

    def __init__(self, N, q, sorting=True, *args, **kw):
        """Initialize thread and save queue reference."""
        multiprocessing.Process.__init__(self, *args, **kw)
        self.queue = q
        self.workers = N
        self.sorting = sorting
        self.output = []    
    def run(self):
        """Extract items from the output queue and print until all done."""
        while self.workers:
            p = self.queue.get()
            if p is None:
                self.workers -= 1
            else:
                # This is a real output packet
                self.output.append(p)
        # print only the length of the final string
        print(len("".join(c for (i, c) in (sorted if self.sorting else identity)(self.output))))
        print("Output process terminating")
        sys.stdout.flush()
